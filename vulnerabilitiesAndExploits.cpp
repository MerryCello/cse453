/*******************************************************************
 * Class: CSE 435
 * Prof: Br. Wilson
 * Ponder: Vulnerabilities and Exploits
 * Teammates:
 *    Kevin Foniciello, Brian Aguilar, Paul Semadeni, Chris Van Kammen
 *
 * Purpose:
 *    The purpose of this assignment is to gain a deeper understanding
 *    of the components of memory injection vulnerabilities and to
 *    understand what is required for an exploit to work.
 *
 * Description:
 *
 *******************************************************************/
#include <iostream>
#include <cstring>

using namespace std;


int main() {
   cout << "Hello, World!\n";
   return 0;
}

/*************************************
 * ARRAY VULNERABILITY
 * 1. There must be an array and an array index variable
 * 2. The array index variable must be reachable through external input.
 * 3. There must not be bounds checking on the array index variable.
 ****************************************/
void arrayVulnerability(/* feel free to add parameters */)
{
}


/**************************************
 * ARRAY WORKING
 * Call arrayVulnerability() in a way that does
 * not yield unexpected behavior
 *************************************/
void arrayWorking()
{
   arrayVulnerability(/* parameters with non-malicious data */);
}


/**************************************
 * ARRAY EXPLOIT
 * 1. The attacker provides an array index value outside the expected range
 * 2. The attacker must be able to provide input or redirect
 *    existing input into the array at the index he provided
 * 3. The injected value must alter program state in a way
 *    that is desirable to the attacker
 *************************************/
void arrayExploit()
{
   arrayVulnerability(/* parameters with malicious data */);
}


/*****************************************************************************
 * ARC Injection
 ****************************************************************************/

/**************************************
 * VULNERABILITY
 * Write a function called arcVulnerability() that is vulnerable to an ARC injection attack. As with the array index vulnerability, list all the requirements for ARC injection and make sure that your vulnerability function exhibits them all.
 *************************************/
void arcVulnerability() {
}

/**************************************
 * WORKING
 * Write a function called arcWorking() that calls arcVulnerability() with non-malicious input. As with arrayWorking(), the expectation is that the vulnerability function will behave normally. Provide output from this function.
 *************************************/
void arcWorking() {
   arcVulnerability();
}

/**************************************
 * EXPLOIT
 * Write a function called arcExploit() that calls arcVulnerability(). As with the array index exploit, list all the requirements for exploiting ARC injection and make sure that your expoit function exhibits them all. Provide output from this function.
 *************************************/
void arcExploit() {
   arcVulnerability();
}


/*****************************************************************************
 * VTable Spraying
 ****************************************************************************/

/**************************************
 * VULNERABILITY
 * Write a class called Vulnerability that is vulnerable to vtable smashing attack. This means that there must be a method or two in this class that is vulnerable.
 * Code from reading: http://phrack.org/issues/56/8.html#article
 *************************************/
class Corroded {
private:
   char Buffer[32];
public:
   void SetBuffer(char *String) {
      strcpy(Buffer,String);
   }
   virtual void PrintBuffer() {
      cout << Buffer << endl;
   }
};

class Vulnerability:public Corroded {
public:
   void PrintBuffer() {
      cout << "VulnerabilityClass: ";
      Corroded::PrintBuffer();
   }
};

/**************************************
 * WORKING
 * Write a function called vtableWorking() that instantiates a Vulnerability object and calls the vulnerable method. However, the method will behave normally because malicious input is not passed to the method. Provide output from this function.
 *************************************/
void vtableWorking() {
   Vulnerability weak;
}

/**************************************
 * EXPLOIT
 * Write a function called vtableExploit() that demonstrates vtable spraying. In other words, it is not necessary to demonstrate vtable smashing, but rather just spraying. Provide output from this function.
 *************************************/
void vtableExploit() {
   Vulnerability weak;
}


/*****************************************************************************
 * Stack Smashing
 ****************************************************************************/

/**************************************
 * VULNERABILITY
 * Write a function called stackVulnerability() that contains a stack smashing vulnerability. Note that the code should be something that might actually exist in the codebase. In other words, it should provide a useful function if not exploited. The function should work unless malicious data is provided. Please look the criteria for the stack smashing vulnerability in the reading. Make sure that each of the criteria are present in the vulnerability. In this case, the "external input" requirement comes from a parameter passed by another function.
 *************************************/
void stackVulnerability() {
}

/**************************************
 * WORKING
 * Write a function called stackWorking() that calls stackVulnerability() with non-malicious input. Provide output from this function.
 *************************************/
void stackWorking() {
   stackVulnerability();
}

/**************************************
 * EXPLOIT
 * Write a function called stackExploit() that calls the stackVulnerability() and exploits it. In other words, we will not be accepting user input here. Instead we will pass a value or a buffer to vulnerability() that will cause the vulnerability to be made manifest. Please look at the criteria for each exploitation in the reading. Make sure that all the criteria for the exploitation are met with the exception of the external input (which will be simulated from the passed parameters). Provide output from this function.
 *************************************/
void stackExploit() {
   stackVulnerability();
}


/*****************************************************************************
 * Heap Spraying
 ****************************************************************************/

/**************************************
 * VULNERABILITY
 * Write a function called heapVulnerability() that contains a heap smashing vulnerability. As with stack smashing, make sure that all the conditions of heap smashing are present in the vulnerability.
 *************************************/
void heapVulnerability() {
}

/**************************************
 * WORKING
 * Write a function called heapWorking() that calls heapVulnerability() with non-malicious input. Provide output from this function.
 *************************************/
void heapWorking() {
   heapVulnerability();
}

/**************************************
 * EXPLOIT
 * Write a function called heapExploit() that calls heapVulnerability() and demonstrates heap spraying. In other words, heapVulnerability() must be vulnerable to heap smashing but you will only be required to demonstrate heap spraying. Provide output from this function.
 *************************************/
void heapExploit() {
   heapVulnerability();
}


/*****************************************************************************
 * Integer Overflow
 ****************************************************************************/

/**************************************
 * VULNERABILITY
 * Write a function called intVulnerability() that is vulnerable to an integer overflow attack. As with the other vulnerabilities, the code should do something useful given valid input. In other words, if integers could hold numbers of an infinite size, then there would be no bug.
 *************************************/
void intVulnerability() {
}

/**************************************
 * WORKING
 * Write a function called integerWorking() that calls integerVulnerability() with non-malicious input. Provide output from this function.
 *************************************/
void integerWorking() {
   intVulnerability();
}

/**************************************
 * EXPLOIT
 * Write a function called intExploit() that calls intVulnerability(). This code should manipulate the vulnerable function to perform a way that was not intended by the author. Provide output from this function.
 *************************************/
void intExploit() {
   intVulnerability();
}


/*****************************************************************************
 * ANSI-Unicode Conversion
 ****************************************************************************/

/**************************************
 * VULNERABILITY
 * Write a function called ansiVulnerability() that is vulnerable to an ANSI-Unicode attack. As with the other vulnerabilities, the code should do something useful given valid input. Provide output from this function.
 *************************************/
void ansiVulnerability() {
}


/**************************************
 * WORKING
 * Write a function called ansiWorking() that calls ansiVulnerability() with non-malicious input. Provide output from this function.
 *************************************/
void ansiWorking() {
   ansiVulnerability();
}

/**************************************
 * EXPLOIT
 * Write a function called ansiExploit() that calls ansiVulnerability(). This code should manipulate the vulnerable function to perform a way that was not intended by the author.
 *************************************/
void ansiExploit() {
   ansiVulnerability();
}
